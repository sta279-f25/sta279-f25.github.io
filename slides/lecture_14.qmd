---
title: "Lists"
format: 
  revealjs:
    theme: theme.scss
editor: source
execute: 
  echo: true
editor_options: 
  chunk_output_type: console
---

## Agenda and reminders

Exam 1 next Monday (October 6)

* Data wrangling fundamentals (`select`, `filter`, `mutate`, `summarize`, `group_by`, etc.)
* Reshaping data (pivoting), joins (left join, inner join)
* Wrangling across columns (`across`, `starts_with`, `where`, etc.)
* Iteration (`for` loops, `while` loops, `map`)
* Functions and simulations
  
## Agenda and reminders

* Exam 1 next Monday (October 6)
  * You will read and write short pieces of code
  * I expect you to know what kind of things are possible in R (key ideas like joining, reshaping data, summarizing, grouping, iterating, etc.)
  * I expect you to be familiar with key functions in R
  * Minor syntax errors will not be penalized
  * Example review questions on course website
  * Also look back at class activities and examples
  
## Agenda and reminders

* Exam 1 next Monday (October 6)
  * Review day this Friday (October 3)
* Today: lists
* Wednesday: more on functions (function defaults, function scoping)
* After exam 1:
  * Functions and unit tests
  * Starting text wrangling


## Previously: `purrr::map`

```{r, eval=F}
grade_files <- list.files("intro_stats_grades", full.names=T)
grade_tables <- map(grade_files, read_csv)
```

`map`: apply a function to each element of a list or vector

Output: a list

```{r, include=F}
library(tidyverse)

grade_files <- list.files("~/Documents/Teaching/statistical_computing/classroom-f25/ca11/intro_stats_grades", full.names=T)
grade_tables <- map(grade_files, read_csv)
```

```{r}
typeof(grade_tables)
length(grade_tables)
glimpse(grade_tables[[1]])
```

## Vectors revisited

Vectors can contain numbers, booleans, characters, etc:

```{r, echo=T}
x <- c(0, 1, 2)
x
typeof(x)

x <- c("a", "b", "c")
x
typeof(x)
```

The `typeof` function tells what *type* of object we have

## Vectors of multiple types?

```{r, echo=T, eval=F}
x <- c(0, 1, "a")
x
x[1] + 1
```

What do you think will happen when we run this code?


## Vectors of multiple types?

```{r, echo=T, error=T}
x <- c(0, 1, "a")
x
x[1] + 1
```

Basic vectors (called *atomic* vectors) only contain one type.

## Lists

```{r, echo=T}
x <- list(c(0, 1), "a")
x
```

## Lists

```{r, echo=T}
x <- list(c(0, 1), "a")
x

x[[1]]

x[[1]][1]
```


## Lists

```{r, echo=T}
x <- list(c(0, 1), "a")
x

x[[1]]

x[[1]][1]

typeof(x[[1]])

x[[2]]

typeof(x[[2]])
```

## Visualizing list structure

```{r, echo=T}
x1 <- list(c(1, 2), c(3, 4))
x1
x2 <- list(list(1, 2), list(3, 4))
x2
```

## Indexing lists

```{r, echo=T}
x <- list(c(1, 2), c(3, 4))

x[1]
typeof(x[1])

x[[1]]
typeof(x[[1]])
```

* `x[1]` returns a *list* which contains the first component of `x`
* `x[[1]]` returns the object stored in the first component

## Indexing lists

```{r, echo=T, eval=F}
x <- list(list(1, 2), list(3, 4))
x[1]
```

**Question:** What will `x[1]` return?

## Indexing lists

```{r, echo=T}
x <- list(list(1, 2), list(3, 4))
x[1]
```

## Indexing lists

```{r, echo=T, eval=F}
x <- list(list(1, 2), list(3, 4))
x[[1]]
```

**Question:** What will `x[[1]]` return?

## Indexing lists

```{r, echo=T}
x <- list(list(1, 2), list(3, 4))
x[[1]]
```

**Question:** How do I get just the 3?

## Indexing lists

```{r, echo=T}
x <- list(list(1, 2), list(3, 4))
x[[2]][[1]]
```

## Class activity


[https://sta279-f25.github.io/class_activities/ca_14.html](https://sta279-f25.github.io/class_activities/ca_14.html)




